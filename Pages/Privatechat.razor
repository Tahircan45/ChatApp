@page "/privatechat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable
@inject IMessageService mService
<main>
    <div class="app w-100">
        @if (userInput == null||userInput!="cccpp123")
        {
            <input type="text" class="form-control" name="message" id="message" @bind="userInput" placeholder="Type Acsess KEY">
            <button disabled="@(!IsConnected)">Send</button>
            if(userInput != "cccpp123" && userInput!=null)
            {
                <h3>Wrong Key!</h3>
            }
        }
        else
        {
            <div class="content px-4">

                <div class="message-screen">
                    <ul class="message-list my-4">
                        @foreach (var message in messages)
                        {
                            <li>
                                <div class="message">
                                    <div class="message-author">@message.UserName</div>
                                    <div class="message-content">@message.Content</div>
                                    <small class="message-time text-muted">@message.TimeStamp</small>
                                </div>
                            </li>
                        }
                    </ul>
                    <div class="message-form mb-4">
                        <input type="text" class="form-control" name="message" id="message" @bind="messageInput" placeholder="Message">
                        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
                    </div>
                </div>

            </div>
        }
    </div>
</main>
@code {
    private HubConnection hubConnection;
    private List<Message> messages = new List<Message>();
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            Message mess = new Message();
            mess.Content = message;
            mess.UserName = user;
            messages.Add(mess);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        messages = await mService.GetMessages();
    }
    public void Send()
    {
        SendHub();
        SendDb();
        messageInput = null;
    }
    Task SendHub() =>
        hubConnection.SendAsync("SendMessage", userInput, messageInput);
    public void SendDb()
    {
        Message mess = new Message();
        mess.Content = messageInput;
        mess.UserName = userInput;
        mService.AddMessage(mess);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
